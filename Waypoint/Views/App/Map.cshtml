@{
    ViewData["Title"] = "Map";
    Layout = "~/Views/Shared/AppLayout.cshtml";
}

<!DOCTYPE html>

<head>
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
    <link rel="stylesheet" href="~/css/site.css">

    <style>
        .ui-container {
            bottom: 25px;
            left: 25px;
            background: #282a35;
            border-radius: 5px;
            position: absolute;
            z-index: 1000;
            padding: 15px;
        }

        .map-container {
            position: relative;
            height: 100%;
        }

        .back-button {
            display: none;
        }

        @@media (pointer: none), (pointer: coarse) {
            .direction-input-container {
                margin-left: 60px;
            }

            .back-button {
                width: 55px;
                height: 60px;
                text-align: left;
                display: block !important;
            }

            .directions-box {
                margin-left: 60px;
            }
        }

        .directions-box {
            display: none;
        }
    </style>
</head>

<body>

    <!-- ALL UI MUST GO IN HERE -->
    <div class="map-container">
        <!-- The map -->
        <div id="map" style="height: 100%;"></div>

        <!-- The input for navigation -->
        <form asp-controller="App" asp-action="CalculateDirections" method="post"
            class="ui-container direction-input-container" id="frm-nav-input">
            <input type="hidden" name="currentcoordinates" id="currentcoordinates" />
            <input type="text" name="coordinates" id="txt-coordinates" placeholder="Enter long,lat or Postcode" />
            <input type="submit" value="Navigate" id="btn-start-navigation" />
        </form>


        <!-- Back button on mobile -->
        <a class="ui-container back-button" href="/App/MobileMenu">
            <i class="fa-solid fa-arrow-left"></i>
        </a>

        <!-- Box that contains the directions -->
        <div id="directions-container" class="ui-container directions-box"
            style="height: 100px; width: 500px; color: white; ">
            <p id="instruction-text">Step 1: Loading directions...</p>
            <button id="next-instruction-btn">Next Instruction</button>
        </div>

    </div>


    <!-- SCRIPTS -->
    <!-- -------------------------------------------------------------------------------------------------------------------------------------- -->

    <!-- Dependancies -->
    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/polyline-encoded@0.0.6/dist/polyline.min.js"> </script>
    
    <!-- Script that loads the map -->
    <script>
        // Function to send data to the server
        function sendDataToServer(data) {
            var xhr = new XMLHttpRequest();
            xhr.open("POST", "@Url.Action("ReceiveLocation", "App")", true);
            xhr.setRequestHeader("Content-Type", "application/json; charset=utf-8");

            xhr.onreadystatechange = function () {
                if (xhr.readyState === 4) {
                    if (xhr.status === 200) {
                        // Handle the response from the server if needed
                        console.log("Data received from the server:", xhr.responseText);
                    } else {
                        console.error("Error sending data to the server. Status: " + xhr.status);
                    }
                }
            };

            xhr.send(JSON.stringify(data));
        }
        
        // Initialize the map with default coordinates
        var map = L.map('map').setView([51.505, -0.09], 13);
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; OpenStreetMap contributors'
        }).addTo(map);


        // Gets the users location at the start (No longer needed as of live location)
        if ("geolocation" in navigator) {
            // Get the current position
            navigator.geolocation.getCurrentPosition(
            function (position) {
                // Retrieve latitude and longitude from the position object
                var latitude = position.coords.latitude;
                var longitude = position.coords.longitude;

                // Update the map view with the user's coordinates
                map.setView([latitude, longitude], 13);

                console.log("Latitude: " + latitude);
                console.log("Longitude: " + longitude);
                sendDataToServer(latitude.toString() + "," + longitude.toString());


            },
            function (error) {
                // Handle any errors that occur when trying to get the location
                console.error("Error getting location: " + error.message);
            });
        }
        else {
            // Geolocation is not available in this browser
            console.error("Geolocation is not supported in this browser.");
        }
    </script>

    <!-- Draw route on map -->
    <script>
        var jsonData = @Html.Raw(Model);
        drawRoute(jsonData);

        // Define a function to decode an encoded polyline
        function decodePolyline(encoded) {
            var poly = [];
            var index = 0;
            var lat = 0;
            var lng = 0;

            while (index < encoded.length) {
                var shift = 0;
                var result = 0;

                do {
                    var b = encoded.charCodeAt(index++) - 63;
                    result |= (b & 0x1f) << shift;
                    shift += 5;
                } while (b >= 0x20);

                var dlat = ((result & 1) !== 0 ? ~(result >> 1) : (result >> 1));
                lat += dlat;

                shift = 0;
                result = 0;

                do {
                    var b = encoded.charCodeAt(index++) - 63;
                    result |= (b & 0x1f) << shift;
                    shift += 5;
                } while (b >= 0x20);

                var dlng = ((result & 1) !== 0 ? ~(result >> 1) : (result >> 1));
                lng += dlng;

                var point = [lat * 1e-5, lng * 1e-5];
                poly.push(point);
            }

            return poly;
        }

        // Define the drawRoute function to draw the route on the map
        function drawRoute(routeData) {
            // Ensure you have the map object created
            if (typeof map !== 'undefined') {
                // Clear any existing route if needed
                if (typeof routeLayer !== 'undefined') {
                    map.removeLayer(routeLayer);
                }

                // Extract the encoded polyline from the route data
                var encodedPolyline = routeData.paths[0].points;

                // Decode the encoded polyline using the custom decode function
                var coordinates = decodePolyline(encodedPolyline);

                // Create a polyline using Leaflet
                routeLayer = L.polyline(coordinates, { color: 'blue' }).addTo(map);

                // Fit the map to the bounds of the route
                map.fitBounds(routeLayer.getBounds());
            }
        }
    </script>

    <!-- Show step-by-step navigation instructions -->
    <script>

        // Variables
        var jsonData = @Html.Raw(Model);
        var instructions = jsonData.paths[0].instructions;
        var directionsContainer = document.getElementById("directions-container");
        var instructionText = document.getElementById("instruction-text");
        var nextInstructionBtn = document.getElementById("next-instruction-btn");
        var currentStep = 0;

        // Function to display the current instruction
        function displayCurrentInstruction() {
            //Hide navigation input box
            document.getElementById("frm-nav-input").style.display = "none";
            document.getElementById("directions-container").style.display = "block";


            var currentInstruction = instructions[currentStep];
            if (currentInstruction) {

                //Update step instructions
                var stepNumber = currentStep + 1;
                instructionText.innerHTML = "Step " + stepNumber + ": " + currentInstruction.text;


                //Make voice to speak (Sounds different depending on OS sounds good on android 14 sound bad on Pop!_os)
                var msg = new SpeechSynthesisUtterance();
                msg.text = currentInstruction.text;
                window.speechSynthesis.speak(msg);

            } 
            else {

                //Arrived
                instructionText.innerHTML = "You've reached your destination.";

                // Show location input again if you've reached your destination
                document.getElementById("frm-nav-input").style.display = "block";
                document.getElementById("directions-container").style.display = "none";

                if (typeof routeLayer !== 'undefined') {
                    map.removeLayer(routeLayer);
                }
            }
        }

        // Initial display of the first instruction
        displayCurrentInstruction();

        // Handle the "Next Instruction" button click
        nextInstructionBtn.addEventListener("click", function () {
            currentStep++;
            displayCurrentInstruction();
        });
    </script>

    <!-- Live location -->
    <script>

        var liveLocationMarker = L.marker([0, 0]).addTo(map);

        // Function to continuously update the user's location
        function updateLocation() {
            if ("geolocation" in navigator) {
                navigator.geolocation.watchPosition(
                function (position) {
                    // Retrieve the updated latitude and longitude
                    var latitude = position.coords.latitude;
                    var longitude = position.coords.longitude;

                    // Update the map view with the user's updated coordinates
                    map.setView([latitude, longitude]);

                    // Update the live location marker
                    liveLocationMarker.setLatLng([latitude, longitude]);

                    //Update the Current position text box in the form
                    document.getElementById("currentcoordinates").setAttribute("Value", latitude + "," + longitude)



                },
                function (error) {
                    // Handle any errors that occur when trying to get the updated location
                    console.error("Error updating location: " + error.message);
                },
                {
                    enableHighAccuracy: true,  // Use high-accuracy if available
                    maximumAge: 0,             // Disable caching
                    timeout: 1             // Update location every 30 seconds
                });
            }
            else {
                // Geolocation is not available in this browser
                console.error("Geolocation is not supported in this browser.");
            }
        }

        // Call the updateLocation function to start tracking the user's location
        updateLocation();

    </script>
</body>
